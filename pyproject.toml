[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "agent-zoo"
version = "0.1.0"
description = "Modular building blocks for LLM agent architectures"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Jacek Wydra", email = "jacek.wydra1992@gmail.com"}
]
keywords = [
    "llm",
    "agents",
    "ai",
    "react",
    "chain-of-thought",
    "tree-of-thoughts",
    "multi-agent",
    "reasoning",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pydantic>=2.0",
    "httpx>=0.25",
    "tenacity>=8.2",
    "structlog>=24.0",
    "opentelemetry-api>=1.20",
    "typing-extensions>=4.8;python_version<'3.11'",
]

[project.optional-dependencies]
langchain = [
    "langchain>=0.2",
    "langchain-community>=0.2",
]
openai = [
    "openai>=1.0",
]
anthropic = [
    "anthropic>=0.20",
]
vectordb = [
    "chromadb>=0.4",
    "numpy>=1.24",
]
api = [
    "fastapi>=0.100",
    "uvicorn[standard]>=0.23",
]
all = [
    "agent-zoo[langchain,openai,anthropic,vectordb,api]",
]
dev = [
    "pytest>=8.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.1",
    "pytest-mock>=3.12",
    "ruff>=0.1",
    "mypy>=1.8",
    "black>=24.0",
    "pre-commit>=3.5",
    "mkdocs>=1.5",
    "mkdocs-material>=9.5",
    "mkdocstrings[python]>=0.24",
]

[project.urls]
Homepage = "https://github.com/agent-zoo/agent-zoo"
Documentation = "https://agent-zoo.readthedocs.io"
Repository = "https://github.com/agent-zoo/agent-zoo"
Issues = "https://github.com/agent-zoo/agent-zoo/issues"
Changelog = "https://github.com/agent-zoo/agent-zoo/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "src/agent_zoo/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/docs",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/agent_zoo"]

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # `zip()` without an explicit `strict=` parameter
]

[tool.ruff.isort]
known-first-party = ["agent_zoo"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
strict_equality = true
strict_concatenate = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "langchain.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
]
addopts = [
    "--verbose",
    "--cov=agent_zoo",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src/agent_zoo"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
line-length = 100
target-version = ["py39"]
include = '\.pyi?$'